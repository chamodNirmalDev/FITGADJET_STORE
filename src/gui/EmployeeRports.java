/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import static gui.SplashWindow.logger;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.MySQL2;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author USER
 */
public class EmployeeRports extends javax.swing.JPanel {

    /**
     * Creates new form EmployeeRports
     */
    public EmployeeRports() {
        initComponents();
        loadEmployee("");
        getEmployeeCount();
        jTable1.revalidate();
        jTable1.repaint();
        jDateChooser1.getDateEditor().setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));

        jTextField1.setToolTipText("Search By All Column");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Search");

        jLabel6.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("2345");
        jLabel6.setToolTipText("");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resosurcs/reset.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resosurcs/search.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addGap(28, 28, 28)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                .addGap(32, 32, 32)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "USER ID", "FIRST NAME", "LAST NAME", "NIC", "MOBILE", "PASSWORD", "GENDER", "POSITION", "REGISTERD_DATE", "STATUS", "ADDRESS", "CITY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton2.setBackground(new java.awt.Color(0, 153, 153));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setText("PRINT REPORT");
        jButton2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 381, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 407, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void getEmployeeCount() {
        try {
            String query = "SELECT COUNT(*) AS employee_count FROM `employee`";

            PreparedStatement stmt = MySQL2.getConnection().prepareStatement(query);
            ResultSet resultSet = stmt.executeQuery();

            if (resultSet.next()) {
                int employeeCount = resultSet.getInt("employee_count");
                jLabel6.setText("Total Employees: " + employeeCount);
            }
            resultSet.close();
            stmt.close();

        } catch (Exception e) {
            e.printStackTrace();
            logger.log(Level.WARNING, "Employee Report getEmployeeCount", e);
        }
    }

    public void loadEmployee(String searchText) {

        try {
            String query = "SELECT * FROM employee "
                    + "INNER JOIN employee_type ON employee.employee_type_id = employee_type.id "
                    + "INNER JOIN gender ON employee.gender_id = gender.id "
                    + "INNER JOIN status ON employee.Status_id = status.id "
                    + "INNER JOIN employee_address ON employee.employee_id = employee_address.employee_employee_id "
                    + "INNER JOIN city ON employee_address.city_id = city.id ";

            if (searchText != null && !searchText.trim().isEmpty()) {
                query += "WHERE employee.f_name LIKE ? "
                        + "OR employee.l_name LIKE ? "
                        + "OR employee.nic LIKE ? "
                        + "OR employee.mobile LIKE ? "
                        + "OR status.status LIKE ? "
                        + "OR employee_address.address_line_01 LIKE ? "
                        + "OR employee_address.address_line_02 LIKE ? "
                        + "OR city.name LIKE ? "
                        + "OR employee_type.type LIKE ? "
                        + "OR employee.employee_id LIKE ?";
            }

            try (PreparedStatement statement = MySQL2.getConnection().prepareStatement(query)) {
                if (searchText != null && !searchText.trim().isEmpty()) {
                    String searchPattern = "%" + searchText + "%";
                    for (int i = 1; i <= 10; i++) {
                        statement.setString(i, searchPattern);
                    }
                }

                ResultSet resultSet = statement.executeQuery();
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);

                while (resultSet.next()) {
                    Vector<String> vector = new Vector<>();
                    vector.add(resultSet.getString("employee_id"));
                    vector.add(resultSet.getString("employee.f_name"));
                    vector.add(resultSet.getString("employee.l_name"));
                    vector.add(resultSet.getString("employee.nic"));
                    vector.add(resultSet.getString("employee.mobile"));
                    vector.add(resultSet.getString("employee.password"));
                    vector.add(resultSet.getString("gender.type"));
                    vector.add(resultSet.getString("employee_type.type"));
                    vector.add(resultSet.getString("employee.registerd_date"));
                    vector.add(resultSet.getString("status.status"));
                    vector.add(resultSet.getString("employee_address.address_line_01") + " " + resultSet.getString("employee_address.address_line_02"));
                    vector.add(resultSet.getString("city.name"));
                    model.addRow(vector);
                }
            } catch (Exception ex) {
                logger.log(Level.WARNING, "Exception In Employee Management in loadEmployee", ex);
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, "Exception In Employee Management in loadEmployee", e);
        }

    }
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        String searchtext = jTextField1.getText();
        loadEmployee(searchtext);
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {

            InputStream s = getClass().getClassLoader().getResourceAsStream("Report/FITEMPLOYEE.jasper");

            HashMap<String, Object> parameters = new HashMap<>();

            JRTableModelDataSource dataSource = new JRTableModelDataSource(jTable1.getModel());
            JasperPrint report = JasperFillManager.fillReport(s, parameters, dataSource);
            JasperViewer.viewReport(report, false);
        } catch (Exception e) {
            //            e.printStackTrace();
            logger.log(Level.WARNING, "Exception In Employee Management in print button", e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextField1.setText("");
        jTextField1.grabFocus();
        jTable1.clearSelection();
        loadEmployee("");
        jTable1.revalidate();
        jTable1.repaint();
        jDateChooser1.setDate(null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Date selectedDate = jDateChooser1.getDate();
        if (selectedDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String dateString = dateFormat.format(selectedDate);

            String query = "SELECT * FROM employee "
                    + "LEFT JOIN employee_type ON employee.employee_type_id = employee_type.id "
                    + "LEFT JOIN gender ON employee.gender_id = gender.id "
                    + "LEFT JOIN status ON employee.status_id = status.id "
                    + "LEFT JOIN employee_address ON employee_address.employee_employee_id = employee.employee_id "
                    + "LEFT JOIN city ON employee_address.city_id = city.id "
                    + "WHERE employee.registerd_date = ? "
                    + "ORDER BY employee.employee_id ASC";

            try (PreparedStatement statement = MySQL2.getConnection().prepareStatement(query)) {
                statement.setString(1, dateString);

                ResultSet resultSet = statement.executeQuery();
                if (!resultSet.isBeforeFirst()) { // No rows in result set
                    JOptionPane.showMessageDialog(this, "No data found for the selected date.");
                    return;
                }
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
                defaultTableModel.setRowCount(0);

                while (resultSet.next()) {
                    Vector<String> vector = new Vector<>();
                    vector.add(resultSet.getString("employee_id") != null ? resultSet.getString("employee_id") : "N/A");
                    vector.add(resultSet.getString("f_name") != null ? resultSet.getString("f_name") : "N/A");
                    vector.add(resultSet.getString("l_name") != null ? resultSet.getString("l_name") : "N/A");
                    vector.add(resultSet.getString("nic") != null ? resultSet.getString("nic") : "N/A");
                    vector.add(resultSet.getString("mobile") != null ? resultSet.getString("mobile") : "N/A");
                    vector.add(resultSet.getString("password") != null ? resultSet.getString("password") : "N/A");
                    vector.add(resultSet.getString("gender.type") != null ? resultSet.getString("gender.type") : "N/A");
                    vector.add(resultSet.getString("employee_type.type") != null ? resultSet.getString("employee_type.type") : "N/A");
                    vector.add(resultSet.getString("registerd_date") != null ? resultSet.getString("registerd_date") : "N/A");
                    vector.add(resultSet.getString("status.status") != null ? resultSet.getString("status.status") : "N/A");
                    vector.add(resultSet.getString("employee_address.address_line_01") + " " + resultSet.getString("employee_address.address_line_02"));
                    vector.add(resultSet.getString("city.name") != null ? resultSet.getString("city.name") : "N/A");

                    defaultTableModel.addRow(vector);
                }
                resultSet.close();
            } catch (Exception ex) {
                ex.printStackTrace();
                logger.log(Level.WARNING, "Exception In Employee Report in Error: " + ex.getMessage(), ex);
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        } else {
            loadEmployee("");
            JOptionPane.showMessageDialog(this, "Please select a date.");

        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
